using System.Collections.Generic;

namespace SGS29.CBA
{
    /// <summary>
    /// Інтерфейс групи компонентів, який містить список компонентів та забезпечує їх обробку.
    /// Цей інтерфейс дозволяє зібрати кілька компонентів, що обробляють один і той самий тип даних, 
    /// і централізовано їх ініціалізувати та обробляти.
    /// </summary>
    /// <typeparam name="B">Тип компонента, що реалізує <see cref="IComponentHandler{V}"/>. 
    /// Це компоненти, які обробляють значення типу <typeparamref name="V"/>.</typeparam>
    /// <typeparam name="V">Тип значення, що обробляється компонентами. Це може бути будь-який тип даних, 
    /// зокрема числові значення, вектори, або інші об'єкти, що використовуються компонентами для обробки.</typeparam>
    public interface IComponentGroup<B, V> : INamed, IHandling<V> where B : IComponentHandler<V>
    {
        /// <summary>
        /// Колекція компонентів, які входять до цієї групи.
        /// Кожен компонент обробляє певний тип даних <typeparamref name="V"/>.
        /// Цей список компонентів можна використовувати для централізованої обробки та взаємодії з ними.
        /// </summary>
        IEnumerable<B> Components { get; }

        /// <summary>
        /// Ініціалізація залежностей для компонентів групи.
        /// Це дозволяє кожному компоненту отримати інші необхідні компоненти або сервіси,
        /// які можуть бути використані для виконання їх логіки.
        /// Зазвичай цей метод викликається один раз під час початкової настройки.
        /// </summary>
        /// <param name="dependencies">Колекція залежностей, яку можна використовувати для налаштування. 
        /// Це словник, де ключі - це назви залежностей, а значення - об'єкти, що представляють ці залежності, 
        /// наприклад, інші компоненти чи сервіси.</param>
        void SetDependencies(Dictionary<string, object> dependencies);
    }
}