using System;
using System.Collections.Generic;
using UnityEngine;

namespace SGS29.ComponentBasedArchitecture
{
    /// <summary>
    /// Абстрактний клас для обробників компонентів.
    /// Містить реалізацію загальних методів для спрощення створення конкретних обробників.
    /// Цей клас слугує основою для всіх компонентів, що обробляють значення типу <typeparamref name="V"/>.
    /// </summary>
    /// <typeparam name="V">Тип значення, що обробляється компонентом.</typeparam>
    public abstract class AbstractComponentHandler<V> : MonoBehaviour, IComponentHandler<V>
    {
        /// <summary>
        /// Назва компонента.
        /// Використовується для ідентифікації конкретного обробника. 
        /// За замовчуванням повертає ім'я класу, але може бути перекрите у нащадках для специфічних випадків.
        /// </summary>
        public virtual string Name => GetType().Name;

        /// <summary>
        /// Словник залежностей, який зберігає всі зовнішні залежності для компонента.
        /// Залежності можуть бути іншими компонентами або сервісами, необхідними для роботи цього компонента.
        /// </summary>
        protected Dictionary<string, object> Dependencies { get; private set; }

        /// <summary>
        /// Подія, яка викликається після ініціалізації залежностей компонента.
        /// Ця подія дозволяє підписатися на зміни в залежностях, наприклад, для виконання додаткових налаштувань чи логіки.
        /// </summary>
        public event Action<Dictionary<string, object>> OnDependenciesInitialize;

        /// <summary>
        /// Виконує обробку компонента та повертає результат.
        /// Цей метод має бути перекритий в нащадках для специфічної логіки обробки.
        /// Він відповідає за основну обробку даних або дій, визначених конкретним компонентом.
        /// </summary>
        /// <returns>
        /// Результат обробки у вигляді значення типу <typeparamref name="V"/>.
        /// Це може бути будь-який тип, що відповідає специфікації компонента (наприклад, вектор, число, об'єкт тощо).
        /// </returns>
        public abstract V Handle();

        /// <summary>
        /// Ініціалізує залежності для компонента.
        /// Цей метод дозволяє передати зовнішні залежності (наприклад, інші компоненти чи сервіси), 
        /// що можуть бути необхідні для коректної роботи компонента.
        /// Метод може бути викликаний один раз при старті компонента або коли потрібно оновити його залежності.
        /// Після ініціалізації залежностей буде викликана подія <see cref="OnDependenciesInitialize"/>.
        /// </summary>
        /// <param name="dependencies">
        /// Словник залежностей, де ключем є назва залежності (як рядок), 
        /// а значенням — об'єкт, що представляє залежність (наприклад, інші компоненти або сервіси).
        /// </param>
        public void SetDependencies(Dictionary<string, object> dependencies)
        {
            // Зберігаємо залежності
            Dependencies = dependencies;

            // Викликаємо подію для повідомлення про ініціалізацію залежностей
            OnDependenciesInitialize?.Invoke(dependencies);
        }
    }
}